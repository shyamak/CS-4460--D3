<!DOCTYPE html>
<html lang="en">


	<head>
		<!--CS 4460, D3 assignment
			Author: Shyamak Aggarwal, Marten Kendrick
			Date: Feb 2, 2015
		-->
		<meta charset="utf-8">
		<title>D3 Test</title>
		<script type="text/javascript" src="d3/d3.js"></script>

		<style type="text/css">
			
			.chart {
		/* Adding a background to our canvas */
				background: white;
				float: left;
			}
			
			.chart rect {
				fill: white;
			}

			.legend {
				overflow: auto;
				background: white;
				height: 460px;
				width: 680px;
			}
	  
	  .x.axis text {
		fill: #000;
	  }
	  
	  .x.axis line {
		stroke: #aaaaaa;
	  }
	  
	  .y.axis text {
		fill: #000;
	  }
	  
	  .y.axis line {
		stroke: gray;
	  }
	  
	  .g.tick {
		stroke: black;
		opacity: 0.7;
	  }
	  .g path {
		
		stroke-width: 1;
	  }

			.chart text {
			  fill: white;
			  font: 10px sans-serif;
			  text-anchor: middle;
			}

			 text.xText{
			  fill: black;
			  font: 10px sans-serif;
			  text-anchor: middle;
			}
		</style>
	</head>


	<body>
		<div id="chart" class="chart"></div>
		<div id="legend" class="legend"></div>
		<div id="filters">
			Filter by Continent:<br>
			<input class="filterButton" type="checkbox" id="North America" value="NA">North America</input><br />
			<input class="filterButton" type="checkbox" id="South America" value="SA">South America</input><br />
			<input class="filterButton" type="checkbox" id="Europe" value="EU">Europe</input><br />
			<input class="filterButton" type="checkbox" id="Africa" value="AF">Africa</input><br />
			<input class="filterButton" type="checkbox" id="Asia" value="AS">Asia</input><br />
		</div>
		<script type="text/javascript"> //src = d3/d3.js?
		function colorFromCountry(x,i) {
			var red;
			var blue;
			var green;
			if(i%3 === 0) {
				red = 255-Math.min(Math.abs(i%100*5),255);
				blue = 255-Math.min(Math.abs(i%100*5-170),255);
				green = 255-Math.min(Math.abs(i%100*5-255),255);
			} else if(i%3 === 1) {
				red = 255-Math.min(Math.abs(i%100*5-50),255);
				blue = 255-Math.min(Math.abs(i%100*5-230),255);
				green = 255-Math.min(Math.abs(i%100*5-285),255);
			} else {
				red = 255-Math.min(Math.abs(i%100*5-100),255);
				blue = 255-Math.min(Math.abs(i%100*5-330),255);
				green = 255-Math.min(Math.abs(i%100*5-355),255);
			}
			return "rgb("+red+","+blue+","+green+")";
		};
	  
		function updateFilteredCircles() {
			chart.selectAll("circle")
				.attr("display", function(d) {
					var i;
					var anyFiltersDefined = 0;
					for(i=0;i<appliedFilters.length;i++) {
						if(appliedFilters[i] == 1) {
							anyFiltersDefined = 1;
							break;
						}
					}
					if(anyFiltersDefined == 0) {
						return "inline";
					}
					if(appliedFilters[0] === 1) {
						for(i=0;i<countriesInNA.length;i++) {
							if(d.Country === countriesInNA[i]) {
								console.log("Found filtered Country");
								return "inline";
							}
						}
					}
					if(appliedFilters[1] === 1) {
						for(i=0;i<countriesInSA.length;i++) {
							if(d.Country === countriesInSA[i]) {
								console.log("Found filtered Country");
								return "inline";
							}
						}
					}
					if(appliedFilters[2] === 1) {
						for(i=0;i<countriesInEU.length;i++) {
							if(d.Country === countriesInEU[i]) {
								console.log("Found filtered Country");
								return "inline";
							}
						}
					}
					if(appliedFilters[3] === 1) {
						for(i=0;i<countriesInAF.length;i++) {
							if(d.Country === countriesInAF[i]) {
								console.log("Found filtered Country");
								return "inline";
							}
						}
					}
					if(appliedFilters[4] === 1) {
						for(i=0;i<countriesInAS.length;i++) {
							if(d.Country === countriesInAS[i]) {
								console.log("Found filtered Country");
								return "inline";
							}
						}
					}
					
					return "none";
				});
		}
		
		var width = 680;
		var height = 460;
		var width2 = 680;
		var oX = 40;
		var oY = 40;

		//Additions for filtering:
		// These 6 arrays
		// The function updateFilteredCircles
		// The Filtering div & inputs
		// The extra D3 code before the legend
		var countriesInNA = ["United States"];
		var countriesInSA = ["Brazil"];
		var countriesInEU = ["Great Britain"];
		var countriesInAF = ["Kenya"];
		var countriesInAS = ["Russia"];
		var appliedFilters = new Array(5);
		
		var zoom = d3.behavior.zoom()
			.scaleExtent([1, 10])
			.on("zoom", zoomed);
			
		var drag = d3.behavior.drag()
			.origin(function(d) { return d; })
			.on("dragstart", dragstarted)
			.on("drag", dragged)
			.on("dragend", dragended);
			
		function dragstarted(d) {
			d3.event.sourceEvent.stopPropagation();
			d3.select(this).classed("dragging", true);
		}

		function dragged(d) {
			d3.select(this).attr("cx", d.x = d3.event.x).attr("cy", d.y = d3.event.y);
		}

		function dragended(d) {
			d3.select(this).classed("dragging", false);
		}
	
		var chart = d3.select("#chart")
			.append("svg")
			.attr("width", width)
			.attr("height", height)
			.call(zoom);
	
		function zoomed() {
			chart.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
		}
		
		//Setting our x and y axes
		//RangeRoundBands returns the band width. Decimal value is the padding
		//Range provides the band height (because of the inverted values).
		var x = d3.scale.linear().domain([1, 50]).range([oX+40,oX+540]);
		var y = d3.scale.ordinal().domain(["Gold","Silver","Bronze"]).range([oY+40,oY+140,oY+240]);

		//Pull our data from the CSV file
		d3.csv("Olympics.csv", function(error, data){
			   
		//Circle for Gold Medals
		var circles = chart.selectAll("g")
			.data(data)
			.enter()
			.append("g")
			.attr("transform", function(d) { return "translate(10,10)"; });
		 
		//Generating circle SVG elements for our data
		var xAxis = d3.svg.axis().scale(x).tickSize(-height,0,1).orient("bottom");
		var yAxis = d3.svg.axis().scale(y).tickSize(0,0,1).orient("left");
		
		var xAxisGroup = chart.append("a")
			.attr("class","x axis")
			.attr("transform", "translate(0," + (height-100) + ")")
			.call(xAxis);
		var yAxisGroup = chart.append("a")
			.attr("class","y axis")
			.attr("transform", "translate(60,10)")
			.call(yAxis);

		xAxisGroup.append("text")
			.attr("x", 280)
			.attr("y", 30)
			.text("No of Medals");

		  
		//GOLD MEDAL CIRCLES
		circles.append("circle")
			.attr("cx", function(d) { return x(d.GoldMedals); }) // Setting the Y position of individual bars based on the data
			.attr("cy", y("Gold")) // At the chosen Y position, we're now specifying height.
			.attr("r", function(d) { return d.TotalMedals/3; })
			.style("fill", function(d,i) {
				return colorFromCountry(d,i);
			})
			.style("stroke", "#000000");
		
		//SILVER MEDAL CIRCLES
		circles.append("circle")
			.attr("cx", function(d) { return x(d.Silver); }) // Setting the Y position of individual bars based on the data
			.attr("cy", y("Silver")) // At the chosen Y position, we're now specifying height.
			.attr("r", function(d) { return d.TotalMedals/3; })
			.style("fill", function(d,i) {
				return colorFromCountry(d,i);
			})
			.style("stroke", "#000000");
		
		//BRONZE MEDAL CIRCLES
		circles.append("circle")
			.attr("cx", function(d) { return x(d.Bronze); }) // Setting the Y position of individual bars based on the data
			.attr("cy", y("Bronze")) // At the chosen Y position, we're now specifying height.
			.attr("r", function(d) { return d.TotalMedals/3; })
			.style("fill", function(d,i) {
				return colorFromCountry(d,i);
			})
			.style("stroke", "#000000");
		   
		//Filtering
		d3.selectAll(".filterButton")
			.on("change", function() {
				var currentFilter = 0;
				console.log(this.value);
				if(this.value == "NA")
					currentFilter = 0;
				else if(this.value == "SA")
					currentFilter = 1;
				else if(this.value == "EU")
					currentFilter = 2;
				else if(this.value == "AF")
					currentFilter = 3;
				else
					currentFilter = 4;
				
				if(this.checked) {
					appliedFilters[currentFilter] = 1;
				} else {
					appliedFilters[currentFilter] = 0;
				}
				
				updateFilteredCircles();
			});
			
		
		//LEGEND		
		var legend = d3.select("#legend")
			.append("svg")
			.attr("width", width2)
			.attr("height", 4060);

		var legendKey = legend.selectAll("g")
			.data(data)
			.enter()
			.append("g")
			.attr("transform", function(d) { return "translate(1,1)";});

		legendKey.append("rect")
			.attr("x", 100)
			.attr("y", function(d, i) { return i*20})
			.attr("width", 180)
			.attr("height", 15)
			.style("fill", function(d, i) {
				return colorFromCountry(d,i);
			})
		  
		legendKey.append("text")
			.attr("x", 150)
			.attr("y", function(d, i) { return i*20+14})
			.attr("height", 5)
			.text(function (d) { return d.Country})
			.style("fill", "white")
			.style("text-anchor", "start");
	});
		   

		</script>
	</body>
</html>
